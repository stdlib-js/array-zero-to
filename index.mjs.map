{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport base from '@stdlib/array-base-zero-to';\nimport zeros from '@stdlib/array-zeros';\nimport defaults from '@stdlib/array-defaults';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.default' );\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced numeric array whose elements increment by 1 starting from zero.\n*\n* @param {NonNegativeInteger} n - number of elements\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {(TypedArray|Array|ComplexArray)} array or typed array\n*\n* @example\n* var arr = zeroTo( 2 );\n* // returns <Float64Array>[ 0.0, 1.0 ]\n*\n* @example\n* var arr = zeroTo( 2, 'float32' );\n* // returns <Float32Array>[ 0.0, 1.0 ]\n*/\nfunction zeroTo( n ) {\n\tvar dtype;\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', n ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tdtype = arguments[ 1 ];\n\t\tif ( dtype === 'generic' ) {\n\t\t\treturn base( n );\n\t\t}\n\t} else {\n\t\tdtype = DEFAULT_DTYPE;\n\t}\n\treturn base.assign( zeros( n, dtype ), 1, 0 ); // defer dtype validation to `zeros`\n}\n\n\n// EXPORTS //\n\nexport default zeroTo;\n"],"names":["DEFAULT_DTYPE","defaults","get","zeroTo","n","dtype","isNonNegativeInteger","TypeError","format","arguments","length","base","assign","zeros"],"mappings":";;2dA+BA,IAAIA,EAAgBC,EAASC,IAAK,kBAsBlC,SAASC,EAAQC,GAChB,IAAIC,EACJ,IAAMC,EAAsBF,GAC3B,MAAM,IAAIG,UAAWC,EAAQ,+EAAgFJ,IAE9G,GAAKK,UAAUC,OAAS,GAEvB,GAAe,aADfL,EAAQI,UAAW,IAElB,OAAOE,EAAMP,QAGdC,EAAQL,EAET,OAAOW,EAAKC,OAAQC,EAAOT,EAAGC,GAAS,EAAG,EAC3C"}